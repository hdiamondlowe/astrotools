# create a regions file for ds9 that includes only the stars that made it onto the slit mask
# requires slit mask input file (like, from Magellan LDSS3 mask generating software)
# Author: Hannah Diamond-Lowe
# Date: 26 Fab 2016
# Updated: 29 Feb 2016  by HDL  now takes .obw file, which is output by ldss3 maskgen software
# Updated: 2 Mar 2016   by HDL  now has label = True option; if set to False, stars will not be labeled in ds9 
# Updated 20 Sept 2017  by HDL  can now take .obw or SMF files

def slitmask_regions(input_file, output_file_name='output', circle_color='red', obs_file='', fov='', label=True, HOLE=True):
    '''
    Takes: obw_file         (str)  name and type of file, e.g. 'inputs.obw' --> output of Magellan slit mask software
           output_file_name (str)  name of your output file e.g. 'my_output_file' (no file type)
           circle_color     (str)  supported colors: white, black, red, green, blue, cyan, magenta, yellow
           obs_file         (str)  name and type of file, e.g. 'inputs.obs' --> maskgen out put
           fov              (str)  field of view, e.g. '4\''
           label            bool   do you want your circles labeled according to the regions file? default yes (True)
    Returns: output_file_name.reg (default output.reg) that can be loaded into ds9
             when loaded into ds9, output file will place 5'' labeled circles at the specified RA and Dec of your stars
    '''
    if 'obw' in input_file:
        with open(input_file) as obw:
        # inputs file columns: star_name    RA[hms]     Dec[dms]    priority(magnitude)   use   width[arcsec]   shape(2=rectangle, does not exist for @star)  length(->) length(<-)
            obw_lines = obw.readlines()
        # create a dictionary that will hold information about the stars you're putting on your mask
        star_dict = {}
        for l in obw_lines:
            # eliminate authenticity line automatically generated by maskgen software
            if l[0]!= '@' and l[0] != '*': continue
            if HOLE != True: 
                if '*' in l: continue
            # add relevant information to your star dictionary
            star_dict.setdefault('name', []).append(l.split()[0])
            star_dict.setdefault('ra', []).append(l.split()[1])
            star_dict.setdefault('dec', []).append(l.split()[2])

    elif 'SMF' in input_file:
        with open(input_file) as smf:
        # inputs file columns: star_name    RA[hms]     Dec[dms]    priority(magnitude)   use   width[arcsec]   shape(2=rectangle, does not exist for @star)  length(->) length(<-)
            smf_lines = smf.readlines()
        # create a dictionary that will hold information about the stars you're putting on your mask
        star_dict = {}
        for l in smf_lines:
            # eliminate authenticity line automatically generated by maskgen software
            if 'SLIT' in l.split():
                # add relevant information to your star dictionary
                star_dict.setdefault('name', []).append(l.split()[1])
                star_dict.setdefault('ra', []).append(l.split()[2])
                star_dict.setdefault('dec', []).append(l.split()[3])
            if HOLE and 'HOLE' in l.split(): 
                # add relevant information to your star dictionary
                star_dict.setdefault('name', []).append(l.split()[1])
                star_dict.setdefault('ra', []).append(l.split()[2])
                star_dict.setdefault('dec', []).append(l.split()[3])


    # create the regions file; filename specified in function call, default name is "output"
    reg = open(output_file_name + '.reg', 'w')
    reg.write('# Region file format: DS9 version 4.0 \n')
    reg.write('global color=' + circle_color + ' font="helvetica 10 normal roman" edit=1 move=1 delete=1 highlite=1 include=1 wcs=wcs \n\n')

    for s in range(len(star_dict['name'])):
        # eliminate sky slits (no star present)
        # comment out "if" statement if you want every slit position in mask to be added to regions file
        if 'sky' in star_dict['name'][s]:
            continue
        # write to the regions file using ds9's awkward syntax
        if label == False:
            reg.write('fk5;circle(' 
                    + star_dict['ra'][s] + ',' + star_dict['dec'][s] 
                    + ', 5") \n')
        else:
            reg.write('fk5;circle(' 
                    + star_dict['ra'][s] + ',' + star_dict['dec'][s] 
                    + ', 5") # text = {' + star_dict['name'][s] + '} \n')

    if obs_file != '':
        with open(obs_file) as obs:
            obs_lines = obs.readlines()
        for l in obs_lines:
            if 'CENTER' in l:
                star_dict.setdefault('mask_ra', []).append(l.split()[1])
                star_dict.setdefault('mask_dec', []).append(l.split()[2])
        reg.write('fk5;circle(' 
                    + star_dict['mask_ra'][0] + ',' + star_dict['mask_dec'][0] 
                    + ', ' + fov + ') \n')

    reg.close()

    return star_dict

